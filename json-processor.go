package main

import (
	"encoding/json"
	"log"
	"os"
)

type Devices struct {
	devices map[string][]string
}

type NVDRequest struct {
	ResultsPerPage  int             `json:"resultsPerPage"`
	StartIndex      int             `json:"startIndex"`
	TotalResults    int             `json:"totalResults"`
	Format          string          `json:"format"`
	Version         string          `json:"version"`
	Timestamp       string          `json:"timestamp"`
	Vulnerabilities []Vulnerability `json:"vulnerabilities"`
}

type Vulnerability struct {
	CVEs CVE `json:"cve"`
}

type CVE struct {
	ID               string          `json:"id"`
	SourceIdentifier string          `json:"sourceIdentifier"`
	Published        string          `json:"published"`
	LastModified     string          `json:"lastModified"`
	VulnStatus       string          `json:"vulnStatus"`
	Descriptions     []Description   `json:"descriptions"`
	Metrics          []Metric        `json:"metrics"`
	Weaknesses       []Weakness      `json:"weaknesses"`
	Configurations   []Configuration `json:"configurations"`
	References       []Reference     `json:"references"`
}

type Metric struct {
	CvssMetricsV2 []CVSSMetricsV2 `json:"cvssMetricV2"`
}

type CVSSMetricsV2 struct {
	Source                  string   `json:"source"`
	Type                    string   `json:"type"`
	cvssData                CVSSData `json:"cvssData"`
	ExploitabilityScore     float64  `json:"exploitabilityScore"`
	ImpactScore             float64  `json:"impactScore"`
	AcInsufInfo             bool     `json:"acInsufInfo"`
	ObtainAllPrivilege      bool     `json:"obtainAllPrivilege"`
	ObtainUserPrivilege     bool     `json:"obtainUserPrivilege"`
	ObtainOtherPrivilege    bool     `json:"obtainOtherPrivilege"`
	UserInteractionRequired bool     `json:"userInteractionRequired"`
}

type CVSSData struct {
	Version               string  `json:"version"`
	VectorString          string  `json:"vectorString"`
	AccessVector          string  `json:"accessVector"`
	AccessComplexity      string  `json:"accessComplexity"`
	Authentication        string  `json:"authentication"`
	ConfidentialityImpact string  `json:"confidentialityImpact"`
	IntegrityImpact       string  `json:"integrityImpact"`
	AvailabilityImpact    string  `json:"availabilityImpact"`
	BaseScore             float64 `json:"baseScore"`
	BaseSeverity          string  `json:"baseSeverity"`
}

type Weakness struct {
	Source      string        `json:"source"`
	Type        string        `json:"type"`
	Description []Description `json:"description"`
}

type Configuration struct {
	Nodes []Node `json:"nodes"`
}

type Reference struct {
	URL    string   `json:"url"`
	Source string   `json:"source"`
	Tags   []string `json:"tags,omitempty"`
}

type Description struct {
	Lang  string `json:"lang"`
	Value string `json:"value"`
}

type Node struct {
	Operator string     `json:"operator"`
	Negate   bool       `json:"negate"`
	CpeMatch []CPEMatch `json:"cpeMatch"`
}

type CPEMatch struct {
	Vulnerable      bool   `json:"vulnerable"`
	Criteria        string `json:"criteria"`
	MatchCriteriaID string `json:"matchCriteriaId"`
}

func readDevices() Devices {
	filepath := "./json/device-keywords.json"
	// reading the device-keywords.json file
	dcontent, err := os.ReadFile(filepath)
	if err != nil {
		log.Fatal("There is no file " + filepath)
	}
	var devices Devices
	err = json.Unmarshal(dcontent, &devices.devices)
	if err != nil || &devices.devices == nil {
		log.Fatal("Check if the file " + filepath + " is in json format")
	}
	return devices
}

func readJSON(device string) NVDRequest {
	filepath := "./json/" + device + ".json"
	dcontent, err := os.ReadFile(filepath)
	if err != nil {
		log.Fatal("There is no file " + filepath)
	}
	var nvdRequest NVDRequest
	err = json.Unmarshal(dcontent, &nvdRequest)
	if err != nil && nvdRequest.Vulnerabilities == nil {
		log.Fatal("Check if the file " + filepath + " is in json format")
	}
	if err != nil {
		log.Println("Not all the file " + filepath + " was processed")
		log.Println(err)
	}
	return nvdRequest
}

func writeToFile(filename string, byte []byte) error {
	return os.WriteFile("./json/"+filename+".json", byte, 0666)
}
