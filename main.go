package main

import (
	"flag"
	"log"
)

func main() {
	mode := flag.String("m", "", "Mode of the tool usage defining the algo of it.")
	flag.Parse()
	// Setting up the default mode usage for scanning network devices for CVEs
	// in a case that nothing was settled for the run
	if *mode == "" {
		*mode = "filljson"
	}
	// main algo is described here
	var devices Devices
	devices = readDevices()

	// chasing mode case to define the model of behavior and collection of API calls for JSON(s) update.
	switch *mode {
	case "filljson":
		// Filling our local JSON files with NVD Data
		// !NOTE, the DB is OLD and format changed dramatically, so not all JSON is Unmarshalled
		var json []byte
		for _, device := range devices.devices["devices"] {
			json = findKeyword(device)
			write := writeToFile(device, json)
			if write != nil {
				log.Fatal("Writing process has failed! Go frack your brain - its 2a.m. for the God's sake!")
			}
		}
		log.Println("The JSON files for the devices are successfully created")
	case "ndtocve":
		// TODO the main algo here for the scanning network devices for CVEs
		for _, device := range devices.devices["devices"] {
			cvejson := readJSON(device)
			//log.Println(cvejson)
			// TODO saving to Excel file
			err := writetoXLXS(cvejson, device)
			if err != nil {
				log.Fatal("Can not write ")
			}
		}
	case "libtocve":
		// TODO the main algo here for the scanning code, imports for CVEs

	case "libtocwe":
		// TODO the main algo here for the scanning code, imports for CWEs
	case "update":
		// TODO update flow
	default:
		log.Fatal("Check your args, something went very wrong")
	}
}
