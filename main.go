package main

import (
	"flag"
	"log"
	"os"
)

func main() {
	mode := flag.String("m", "", "Mode of the tool usage defining the algo of it.")
	// TODO change it for the free string with params
	url := flag.String("u", "", "Target URL for the scan in the IPv4 format")
	port := flag.String("p", "80", "Target ports for the scan")
	threads := flag.Int("t", 5, "The count of threads")
	flag.Parse()
	// Setting up the default mode usage for scanning network devices for CVEs
	// in a case that nothing was settled for the run
	if *mode == "" {
		*mode = "filljson"
	}
	// main algo is described here
	var devices Devices
	devices = readDevices()

	// chasing mode case to define the model of behavior and collection of API calls for JSON(s) update.
	switch *mode {
	case "filljson":
		// Filling our local JSON files with NVD Data
		// !NOTE, the DB is OLD and format changed dramatically, so not all JSON is Unmarshalled
		var json []byte
		for _, device := range devices.devices["devices"] {
			json = findKeyword(device)
			write := writeToFile(device, json)
			if write != nil {
				log.Fatal("Writing process has failed! Go frack your brain - its 2a.m. for the God's sake!")
			}
		}
		log.Println("The JSON files for the devices are successfully created")
	case "savexlxs":
		var gluedjson []NVDRequest
		for _, device := range devices.devices["devices"] {
			cvejson := readJSON(device)
			// Read JSON and Data collection methods for XLXS file are made not in an optimal form
			// for the file creation requiring lots of unnecessary actions.
			// It is made because of next more important operations for the libraries' assessment
			gluedjson = append(gluedjson, cvejson)
		}
		// Writing glued JSON to XLXS file
		err := writetoXLXS(gluedjson, devices)
		if err != nil {
			log.Println("Can not write to the XLXS file report")
			log.Println(err)
		}
	case "scanner":
		var urls, ports []string
		urls = processFlags(*url)
		// Checking for the Fatal pattern for the scanner.
		// If there is no target IP for the scanner
		if urls[0] == "" {
			log.Println("To see Help use ./application -h or , ./application --help flags")
			log.Fatal("Critical issue. Please specify the IP")
		}
		// Erasing non IPv4 IPs from the parameter line
		urls = processRegExp(urls)
		if urls[0] == "" {
			log.Println("To see Help use ./application -h or , ./application --help flags")
			log.Fatal("No Valid IPv4 was in parameters. Please specify the IP")
		}
		// Processing the collection of ports from the command line
		ports = processFlags(*port)
		// Processing the use-case when we used 'top' command and
		// Grabbing nmap top 1000 ports for the scan
		if ports[0] == "top" {
			topports, err := os.ReadFile("./assets/ports.txt")
			if err != nil {
				log.Fatal("There is no file ./assets/ports.txt")
			}
			ports = processPorts(string(topports))
		}
		err := scanDeviceTarget(*threads, urls, ports)
		if err != nil {
			log.Println("Scanner failed")
		}

	case "libtocwe":
		// TODO the main algo here for the scanning code, imports for CWEs
	case "update":
		// TODO update flow
	default:
		log.Fatal("Check your args, something went very wrong")
	}
}
