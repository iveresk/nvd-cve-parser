package main

import (
	"fmt"
	"log"
	"moul.io/banner"
)

type LogMessage struct {
	MessageType string `json:"regular"`
	Message     string `json:"Something went very wrong"`
	Environment string `json:"product"`
	IP          string `json:"IP address"`
	PORT        string `json:"IP PORT"`
}

func getHelper(message string) {
	fmt.Println(banner.Inline("iveresk scanner."))
	fmt.Println(banner.Inline("---------------"))
	usage := "Flags:\n"
	usage += " -m Mode of the tool usage defining the algo of it.\n"
	usage += " -u Target URL for the scan in the IPv4 format\n"
	usage += " -p Target ports for the scan. Default is 80\n"
	usage += " -t The count of threads. Default is 3\n"
	usage += " -n - means Network mode. Default set is 'false' so that scanner should work in the local network only\n"
	usage += " ! Important, you should pre-fill JSON assets with your network keywords.\n"
	usage += " -v - verbose, setting up more wide logs mode for debugging purpose. Default is 'false'.\n"
	usage += " -cp - CVEs report by ports. Default is 'false'. Actually not recommending to use it as there will be a mess\n"
	usage += " in the logs with this key. It's just finding all CVE's by port and there is a HUGE number of 'em.\n"
	usage += "Example:\n"
	usage += " ./gonmap -m scanner -u 127.0.0.53 -p 22,23,44,5001\n"
	usage += " ./gonmap -m scanner -u 127.0.0.0/24 -p top -v -n - where 'top' is a top ports from nmap\n"
	fmt.Println(usage)
	log.Fatal("The error is " + message)
}

// TODO Make it as a struct method
func (m *LogMessage) getLogger() {
	switch m.MessageType {
	case "helper":
		getHelper(m.Message)
	case "fatal":
		log.Fatal(m.Message)
	case "regular":
		log.Println(m.Message)
	case "error":
		if m.Environment == "debugging" {
			log.Println(m.Message)
		}
	default:
		getHelper(m.Message)
	}

}
