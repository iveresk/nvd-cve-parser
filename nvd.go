package main

import (
	"io"
	"log"
	"net/http"
	"os"
)

func GetURL(mode, device string) string {
	// TODO add new cases to the switch described in NVD API
	var res string
	switch mode {
	case "keywordSearch":
		res = "https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch=" + device
	}
	return res
}

func GetHeader() string {
	// TODO describe environmental variable in the README.md
	return os.Getenv("apiKey")
}

func findKeyword(devicename string) []byte {
	//TODO Process pagination for the request
	url := GetURL("keywordSearch", devicename)
	header := GetHeader()
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		log.Println("nvd.gov.us isn't responding")
		log.Println(err)
	}
	req.Header.Set("apiKey", header)
	client := &http.Client{}
	res, err := client.Do(req)
	if err != nil {
		log.Println("Request for the URL = " + url + " is failed!")
		log.Println(err)
	}
	defer res.Body.Close()
	if res.StatusCode == http.StatusOK {
		ret, err := io.ReadAll(res.Body)
		if err != nil {
			log.Println("Response Body is failed to be read. " +
				"Something is with response from nvd.gov.us for the URL" + url)
			log.Println(err)
		}
		return ret
	}
	return nil
}

func findName() {
	//TODO
}

func findCVEID() {
	//TODO
}

func findVector() {
	//TODO
}

func hasKev() {
	//TODO
}

func hasOval() {
	//TODO
}

func getUpdates() {
	//TODO
}
