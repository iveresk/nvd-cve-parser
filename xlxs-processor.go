package main

import (
	"fmt"
	"github.com/360EntSecGroup-Skylar/excelize"
	"strconv"
	"time"
)

func returnCellLetter(index int) string {
	// !Note, this system isn't support wide sheets
	// Width is limited by 26 rows.
	// Do not support double indexes as 'AB'
	if index > 26 { // English alphabet count
		index = 0
	}
	return string(rune('A' + index))
}

func writetoXLXS(resJSON []NVDRequest, devices Devices) error {
	var cell string
	var fillXLXS []string
	var device string
	// step for column filler
	step := 7

	// Appending Data in needed format.
	// It was made as absolutely not optimal thing to glue a file in a format
	// needed for the customer.
	for i, cvejson := range resJSON {
		for j, data := range devices.keywords["devices"] {
			if i == j {
				device = data
			}
		}
		// Creating collection only with viable data
		datas := preProcessNVD(cvejson, device)
		for _, data := range datas {
			fillXLXS = append(fillXLXS, data)
		}
	}
	// Creating XLXS file
	fxlxs := excelize.NewFile()
	// Create a new sheet.
	activesheet := fxlxs.NewSheet("Database")
	//Deleting Default sheet
	fxlxs.DeleteSheet("Sheet1")
	//Making the Header, setting up styles for it.
	style, err := fxlxs.NewStyle(`{"font":{"bold":true}}`)
	if err != nil {
		fmt.Println(err)
	}
	fxlxs.SetCellStyle("Database", "A1", "G1", style)
	fxlxs.SetColWidth("Sheet1", "A1", "G1", 40)
	fxlxs.SetCellValue("Database", "A1", "Device Name")
	fxlxs.AutoFilter("Database", "A1", "F1", "")
	fxlxs.SetCellValue("Database", "B1", "Device Model")
	fxlxs.SetCellValue("Database", "C1", "Vulnerable Firmware (lower & incl.)")
	fxlxs.SetCellValue("Database", "D1", "CVE ID")
	fxlxs.SetCellValue("Database", "E1", "Exploit Score")
	fxlxs.SetCellValue("Database", "F1", "Detailed Description")
	fxlxs.SetCellValue("Database", "G1", "References, URL")
	// Set value of a cell.
	j := 0
	for i, data := range fillXLXS {
		if j%step == 0 {
			j = 0
		}
		// marking cell to be filled
		cell = returnCellLetter(j) + strconv.Itoa(i/step+2) // 2 because we have the Header
		fxlxs.SetCellValue("Database", cell, data)
		j++
	}
	// Set active sheet of the workbook.
	fxlxs.SetActiveSheet(activesheet)
	// Save spreadsheet by the given path.
	err = fxlxs.SaveAs("./output/CVEs-db" + time.Now().Format("01-02-2006") + ".xlsx")
	if err != nil {
		return err
	}
	return nil
}
