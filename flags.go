package main

import (
	"regexp"
	"strconv"
	"strings"
)

func processFlags(flags string) []string {
	var flagres []string
	flagres = strings.Split(flags, ",")
	return flagres
}

func processPorts(ports string) []string {
	var portsres []string
	portsres = strings.Split(ports, "\n")
	return portsres
}

func processRegExp(urls []string) []string {
	// Basic variables setup
	var ip4urls []string
	var ipstring string
	var mask int
	// Main regexp algo
	for _, url := range urls {
		matched, _ := regexp.MatchString("([0-9]{1,3}\\.){3}[0-9]{1,3}", url)
		// If IPv4 we are checking on subnetwork case
		if matched {
			subnetworks := strings.Split(url, "/")
			if len(subnetworks) > 1 {
				// Most 'popular' subnetworks are added
				switch subnetworks[1] {
				//TODO add all subnetworks for the further use-cases
				case "24":
					mask = 256
				case "25":
					mask = 128
				case "26":
					mask = 64
				case "27":
					mask = 32
				case "32":
					mask = 1
				}
				subnetwork := strings.Split(subnetworks[0], ".")
				for i := 0; i < mask; i++ {
					ipint, _ := strconv.Atoi(subnetwork[3])
					ipint += i
					subnetwork[3] = strconv.Itoa(ipint)
					ipstring = strings.Join(subnetwork, ".")
					ip4urls = append(ip4urls, ipstring)
				}
			} else {
				ip4urls = append(ip4urls, url)
			}
		}
	}
	return ip4urls
}
