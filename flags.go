package main

import (
	"regexp"
	"strconv"
	"strings"
)

func processFlags(flags, separator string) []string {
	res := strings.Split(flags, separator)
	return res
}

func processRegExp(urls []string) []string {
	// Basic variables setup
	var ip4URLs []string
	var ips string
	var mask int
	// Main regexp algo
	for _, url := range urls {
		matched, _ := regexp.MatchString("([0-9]{1,3}\\.){3}[0-9]{1,3}", url)
		// If IPv4 we are checking on subnetwork case
		if matched {
			subNetworks := strings.Split(url, "/")
			if len(subNetworks) > 1 {
				// Most 'popular' subnetworks are added
				switch subNetworks[1] {
				//TODO add all subnetworks for the further use-cases
				case "24":
					mask = 256
				case "25":
					mask = 128
				case "26":
					mask = 64
				case "27":
					mask = 32
				case "32":
					mask = 1
				}
				subNetwork := strings.Split(subNetworks[0], ".")
				for i := 0; i < mask; i++ {
					ipint, _ := strconv.Atoi(subNetwork[3])
					ipint += i
					subNetwork[3] = strconv.Itoa(ipint)
					ips = strings.Join(subNetwork, ".")
					ip4URLs = append(ip4URLs, ips)
				}
			} else {
				ip4URLs = append(ip4URLs, url)
			}
		}
	}
	return ip4URLs
}
